"""lab3.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uSMukaAQ9RwUP2EFVfp_3gmy6anEqjen
"""
import math
import random

import torch
from PIL import Image

from CSE569S.Lab3.train_patch import PatchTrainer
from detect import detect

"""2.1 Attack Human-Detection

(1) Detect without patch
Utilize the apis in detect.py to recognize images of people. Feel free to edit the source code if itâ€™s needed. The result should be plotted after running the code.
"""

# Commented out IPython magic to ensure Python compatibility.
# Your code starts here
# Hint: To directly run the main function in a file, use 
# %run file_name.py param1 param2 ...
# detect(cfgfile='./cfg/yolo.cfg', weightfile='./weights/yolo.weights', imgfile='./data/person.jpg')
"""(2) Train patches
Now we will train two patches by ourselves. One of the patches has a starter image as input and the other one is completely generated by our code. To do these, please 


*   Take a look at train_patch.py and edit the relevant code.
*   Write a wrapped-up api for generating these two kinds of patches.
*   Call the api to generate a with-starter-image patch and a without-starter-image patch.

Please make sure to save these images since you need to use them in the next step.
"""

def patch_training_caller(starter_img=None):
# Your code starts here
    if starter_img == None:
        trainer = PatchTrainer('paper_obj')
        trainer.train()
    else:
        trainer = PatchTrainer('paper_obj', starter_img)
        trainer.train()
# Call patch_training_caller to generate a patch with starter image
# Your code starts here
# patch_training_caller()
# Call patch_training_caller to generate a patch without starter image
# Your code starts here
# patch_training_caller('./saved_patches/patchnew0.jpg')

"""(3) Detect people with patches
Use the same api in detect.py as section 2.1 (1) to detect people who hold the patch picture you generated in 2.1 (2). The model should not recognize the people in this case. 

"""

# Your code starts here
# detect(cfgfile='./cfg/yolo.cfg', weightfile='ter./weights/yolo.weights', imgfile='./data/person.jpg')
"""2.2 Attack Stop Signs-Detection

(1) Detect without patch
Similar to 2.1 (1), first we need to use apis in detect.py to recognize images of stop signs.
"""

# Your code starts here
img, boxes, class_type = detect(cfgfile='./cfg/yolo.cfg', weightfile='./weights/yolo.weights', imgfile='./data/stop.jpg')

"""(2) Patch stop signs
* Edit the source code involved in the patch-sticking control flow to attach the patch image on all the stop sign images. Images belonging to any other class (i.e. people, horses, etc.) should not be patched.
* Write a wrapped-up api for sticking patches on stop signs.
* Call the api to stick patch on stop sign. You should specify which patch is used in parameter.

"""


def patch_sticking_caller(img, boxes, savename=None, patch_img=None, class_type=None):
    # If there's no stop sign in the image, the image should not be patched.
    # Your code starts here
    if class_type != 'stop sign' and not boxes:
        print("No stop sign")
        return

    width = img.width
    height = img.height
    for i in range(len(boxes)):
        box = boxes[i]
        x1 = (box[0] - box[2] / 2.0) * width
        y1 = (box[1] - box[3] / 2.0) * height
        x2 = (box[0] + box[2] / 2.0) * width
        y2 = (box[1] + box[3] / 2.0) * height
        patch_img = Image.open(patch_img).resize((270, 270))
        print(patch_img.size)
        # temp_x, temp_y = random.randint(int(x1), int(x2)), random.randint(int(y1), int(y2))
        # while x1 + patch_img.width > x2 and y1 + patch_img.height > y2:
        #     temp_x = random.randint(int(x1), int(x2))
        #     temp_y = random.randint(int(y1), int(y2))
        temp_x = int(x1) + (int(x2) - int(x1)) // 4
        temp_y = int(y1) + (int(y2) - int(y1)) // 4
        img.paste(patch_img, (temp_x+120, temp_y+120))
    if savename:
        print("save plot results to %s" % savename)
        img.save(savename)


# Call patch_sticking_caller to stick a patch on stop sign image.
# Your code starts here
patch_sticking_caller(img=img, boxes=boxes, patch_img='./saved_patches/patchnew1.jpg',class_type=class_type, savename="patched.jpg")
"""(3) Detect stop sign with patch
Use the same api in detect.py as section 2.2 (1) to detect the patched stop sign. The model should not recognize the stop sign in this case.
"""

# Your code starts here
img, boxes, class_type = detect(cfgfile='./cfg/yolo.cfg', weightfile='./weights/yolo.weights', imgfile='./patched.jpg', savename='predictions_patched.jpg')
